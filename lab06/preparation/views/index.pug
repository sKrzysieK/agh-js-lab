//- @author Stanisław Polak <polak@agh.edu.pl>

doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Form
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/mocha/mocha.css")
        style.
            table {
                width: 100%;
            }
            td {
                border: 1px solid #000; 
                padding: 15px;
                text-align: left;
            }
            th {
                background-color: #04AA6D;
                color: white;
            }
        script.
            /**************************************************************************************/
            /* Function that retrieves the content of one of the selected text fields of the form */
            /**************************************************************************************/
            function getName(http_method) {
                let name = '';

                // Depending on the HTTP method, get the value from the corresponding form field
                if (http_method === 'GET') {
                    // Get the value of the 'name_GET' form field
                    name = document.getElementById('name_GET').value;
                } else if (http_method === 'POST') {
                    // Get the value of the 'name_POST' form field
                    name = document.getElementById('name_POST').value;
                }

                return name;
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server using AJAX           */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "document"]                                       */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            function requestAJAX(http_method, response_type, name, show_alert=false) {
                //-----------------------------------------------
                // Create an object representing the request to the web server — see https://developer.mozilla.org/docs/Web/API/XMLHttpRequest
                //-----------------------------------------------
                const xhr = new XMLHttpRequest();

                //-----------------------
                // Observers registration
                //-----------------------

                // If the request was successful
                xhr.addEventListener("load", function (evt) {                          
                    if (xhr.status === 200) {
                        console.group('AJAX');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        console.log(xhr.response);
                        console.groupEnd();
                        if(show_alert) {
                            let message;
                            if(response_type === 'json') window.alert(JSON.stringify(xhr.response));
                            else if (response_type === 'document') {
                                const xmlString = new XMLSerializer().serializeToString(xhr.response);
                                window.alert(xmlString);
                            }
                            else window.alert(xhr.response);
                        }else { 
                            results.set(`ajax ${http_method} ${response_type}`, xhr.response);
                            dispatchEvent(received); 
                        }
                    }
                });

                // If the request was failed
                xhr.addEventListener("error", function (evt) {
                    window.alert('There was a problem with this request.');
                });

                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------
                xhr.responseType = response_type;  // Type of data received by the 'load' observer
                xhr.withCredentials = true; // Do not modify or remove

                //*********************************
                // Specifying connection parameters
                //*********************************
                if(http_method === 'GET') {
                    xhr.open('GET', `http://localhost:8000/submit?name=${encodeURIComponent(name)}`, true);
                }    
                if(http_method === 'POST'){
                    xhr.open('POST', 'http://localhost:8000/submit', true);
                }
                //****************************************************************************************
                // What is the acceptable data type - the server part should return data of the given type
                // Default value: '*/*'
                //****************************************************************************************
                switch(response_type){
                    case 'json':
                        xhr.setRequestHeader('Accept', 'application/json');
                        break;
                    case 'document':
                        xhr.setRequestHeader('Accept', 'application/xml');
                        break;
                }  

                //****************************
                // Making an asynchronous call
                //****************************
                if(http_method === 'GET') {
                    xhr.send(null);
                }
               if(http_method === 'POST') { 
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    const formData = `name=${encodeURIComponent(name)}`;
                    xhr.send(formData); 
                }
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server  usingFetch API      */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "xml"]                                            */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            function requestFetchAPI(http_method, response_type, name, show_alert=false) {
                let accept = '*/*';

                switch(response_type){
                    case 'json':
                        accept = 'application/json';
                        break;
                    case 'xml':
                        accept = 'application/xml';
                        break;
                }
                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------
                    ((http_method) => {
                        if(http_method === 'GET')
                            return fetch(`http://localhost:8000/submit?name=${encodeURIComponent(name)}`, {
                                method: 'GET',
                                credentials: "include", // Do not modify or remove
                                headers: {
                                    //****************************************************************************************
                                    // What is the acceptable data type—the server part should return data of the given type
                                    //****************************************************************************************
                                    Accept: accept
                                }
                            });
                        if(http_method === 'POST') {
                            return fetch('http://localhost:8000/submit', {
                                method: 'POST',
                                credentials: "include", // Do not modify or remove
                                // TO BE ADDED - you need to determine the content of the body
                                body: `name=${encodeURIComponent(name)}`, // Assuming 'name' is the form field name
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded', // Specify content type
                                    //****************************************************************************************
                                    // What is the acceptable data type—the server part should return data of the given type
                                    //****************************************************************************************
                                    Accept: accept
                                }
                            });
                        }


                })(http_method) // a promise is returned
                .then(async function (response) { // if the promise is fulfilled
                    if (!response.ok)
                        throw Error(response.statusText);

                    console.group('Fetch API');
                    console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);

                    let result;

                    // Use await or .then() to handle response.text() and response.json()
                    if (!response.headers.get('content-type')?.includes('application/json')) {
                        // If the received data is plain text or an XML document
                        result = await response.text(); // Await the resolution of the promise
                    } else {
                        // If the received data is a JSON document
                        result = await response.json(); // Await the resolution of the promise
                    }

                    console.log(result);
                    console.groupEnd();   

                    if(show_alert) {
                        let message;
                        if(response_type === 'json') window.alert(JSON.stringify(result));
                        else window.alert(result);
                    } else {
                        results.set(`fetch ${http_method} ${response_type}`, result);
                        dispatchEvent(received);
                    }
                })
                
                .catch(function (error) { // if the promise is rejected
                    window.alert(error);
                });
            }
        script(src="https://cdn.jsdelivr.net/npm/mocha/mocha.js") 
        script(type="module").
            import { expect } from 'https://cdn.jsdelivr.net/npm/chai/chai.js' 
            window.expect = expect
    body
        script(class="mocha-init").
            mocha.setup('bdd');
            mocha.checkLeaks(); 
        main
            table
                tr
                    th  
                    th GET
                    th POST
                tr 
                    th(colspan='3' style=' background-color: #04556D;') Without AJAX and Fetch API
                tr
                    th HTTP
                    td 
                        form(action="http://localhost:8000/submit" method="GET")
                            label(for="name_GET") Your name
                            input(type="text" id="name_GET" name="name")
                            br
                            input(type="submit" value="text")
                    td 
                        form(action="http://localhost:8000/submit" method="POST") 
                            label(for="name_POST") Your name
                            input(type="text" id="name_POST" name="name")
                            br
                            input(type="submit" value="text")
                tr 
                    th(colspan='3' style=' background-color: #04556D;')  Asynchronous requests
                tr 
                    th AJAX 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "document"]

                                button(onclick=`console.clear() ; requestAJAX("${method}","${type}", getName('${method}'), true)`) #{type}
                tr
                    th Fetch API 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "xml"]
                                button(onclick=`console.clear() ; requestFetchAPI("${method}","${type}", getName('${method}'), true)`) #{type}
        h1 Unit tests
        button(onclick='window.location.reload();') Restart
        div(id="mocha")
        script.
            const name = 'John Doe ą/?:@&=+$#';

            if(window.location.port == 8000) { 
                window.addEventListener("load", (event) => {
                    for(let method of ["GET","POST"]){
                        for(let type of ["text", "json", "document"])
                            requestAJAX(method, type, name);                        
                        for(let type of ["text", "json", "xml"])
                            requestFetchAPI(method, type, name);
                    }
                })
            };
        script(class="mocha-exec").
            //****************************************************************************************
            // Unit tests
            //****************************************************************************************
            var results = new Map();
            var received = new Event('received');
            var test_executed = false;

            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;

                return txt.value;
            }

            addEventListener('received', (e) => {
                if(!test_executed && results.size === 12){
                    const parser = new DOMParser();
                    const xml_document= parser.parseFromString("<welcome>Hello 'John Doe ą/?:@&amp;=+$#'</welcome>","text/xml");

                    describe('AJAX requests', function() {
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','text')`, function() {
                            expect(results.get('ajax GET text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','json')`, function() {
                            expect(results.get('ajax GET json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','document')`, function() {
                            expect(results.get('ajax GET document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','text')`, function() {
                            expect(results.get('ajax POST text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','json')`, function() {
                            expect(results.get('ajax POST json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','document')`, function() {
                            expect(results.get('ajax POST document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                    });

                    describe('Fetch API requests', function() {   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','text')`, async function() {
                            const result  = await results.get('fetch GET text')
                            expect(result).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','json')`, async function() {
                            const result  = await results.get('fetch GET json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','xml')`, async function() {
                            const result  = await results.get('fetch GET xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        }); 
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','text')`, async function() {
                            const result  = await results.get('fetch POST text')
                            expect(result).to.equal(`Hello '${name}'`);                   
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','json')`, async function() {
                            const result  = await results.get('fetch POST json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','xml')`, async function() {
                            const result  = await results.get('fetch POST xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        });    
                    });     

                    mocha.run();
                    test_executed = true;
                }
            });        